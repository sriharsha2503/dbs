--create table commands
  -- Drop tables if they exist in reverse order due to foreign key constraints
DROP TABLE IF EXISTS QUIZ_IS_OF;
DROP TABLE IF EXISTS QUESTION_IS_OF;
DROP TABLE IF EXISTS TAKES;
DROP TABLE IF EXISTS QUESTION;
DROP TABLE IF EXISTS QUIZ;
DROP TABLE IF EXISTS SUBJECT;
DROP TABLE IF EXISTS FACULTY;
DROP TABLE IF EXISTS ADMIN;
DROP TABLE IF EXISTS STUDENT;

-- Creation of independent tables
CREATE TABLE STUDENT(
    reg_no varchar(9) primary key,
    name varchar(50),
    dept varchar(3),
    section varchar(1),
    pwd varchar(50)
);

CREATE TABLE ADMIN(
    id varchar(20) primary key,
    pwd varchar(50)
);

CREATE TABLE FACULTY(
    id varchar(20) primary key,
    name varchar(50),
    dept varchar(3),
    pwd varchar(50)
);

CREATE TABLE SUBJECT(
    sub_code varchar(7) primary key,
    name varchar(50),
    sem int,
    credits int
);

CREATE TABLE QUIZ(
    id varchar(20),
    max_marks int,
    duration float,
    primary key(id)
);

CREATE TABLE QUESTION(
    id varchar(20),
    prompt varchar(80),
    choice_a varchar(30),
    choice_b varchar(30),
    choice_c varchar(30),
    choice_d varchar(30),
    correct_ans varchar(1),
    primary key(id)
);

-- Creation of tables with dependencies
CREATE TABLE TAKES(
    reg_no varchar(9),
    id varchar(20),
    deadline date,
    primary key(reg_no, id),
    foreign key(reg_no) references STUDENT,
    foreign key(id) references QUIZ
);

CREATE TABLE QUESTION_IS_OF(
    id varchar(20),
    sub_code varchar(7),
    primary key(id, sub_code),
    foreign key(id) references QUESTION,
    foreign key(sub_code) references SUBJECT
);

CREATE TABLE QUIZ_IS_OF(
    id varchar(20),
    sub_code varchar(7),
    primary key(id, sub_code),
    foreign key(id) references QUIZ,
    foreign key(sub_code) references SUBJECT
);





=============================================================================================================



--insertion into TABLE COMMANDS
insert into STUDENT values('200911076','Aditya Choubey','ICT','B','aditya-c');
insert into STUDENT values('200911026','Palak Dhawal','ICT','B','palak-d');
insert into STUDENT values('200911072','Praneeth Chand','ICT','B','praneeth-c');
insert into STUDENT values('200968009','Sai Anish Malla','DSE','B','anish-m');
insert into STUDENT values('200907096','Tushar Upadhyay','ECE','C','tushar-u');
(200907098, Y Vishal Rao, ECE, C, yvishal-r)

insert into FACULTY values('11076', 'Girija Attigeri', 'ICT', 'girja-a');
insert into FACULTY values('11078', 'Jayashree', 'ICT', 'jayashree');
insert into FACULTY values('68001', 'Vidya Rao', 'DSE', 'vidya-r');
insert into FACULTY values('07031', 'Yellur Vishal Rao', 'ECE', 'yvr');

insert into SUBJECT values('ICT3171', 'Database Systems', 5, 3);
insert into SUBJECT values('ICT3156', 'Cybersecurity', 5, 3);
insert into SUBJECT values('ICT2171', 'Data Structures', 3, 4);
insert into SUBJECT values('ICT2156', 'Digital System Design', 3, 3);
insert into SUBJECT values('ECE3171', 'Analog/Digital Communications', 5, 4);
insert into SUBJECT values('ECE3156', 'Linear Control Theory', 5, 3);
insert into SUBJECT values('ECE2171', 'Computer Organization and Architecture', 3, 3);
insert into SUBJECT values('ECE2156', 'Digital System Design', 3, 3);
insert into SUBJECT values('DSE3171', 'Cloud Computing', 5, 3);
insert into SUBJECT values('DSE3156', 'Natural Language Process', 5, 3);
insert into SUBJECT values('DSE2171', 'Finance and Econometrics', 3, 4);
insert into SUBJECT values('DSE2156', 'Object Oriented Programming', 3, 3);

insert into QUIZ values('DBS001', 10, 30);
insert into QUIZ values('DBS002', 5, 30);
insert into QUIZ values('DBS003', 5, 30);
insert into QUIZ values('CYS001', 5, 30);
insert into QUIZ values('CYS002', 5, 30);
insert into QUIZ values('CYS003', 5, 30);
insert into QUIZ values('CYS004', 5, 30);
insert into QUIZ values('DSA001', 10, 30);
insert into QUIZ values('DSA002', 10, 30);
insert into QUIZ values('ADC001', 5, 30);
insert into QUIZ values('ADC002', 5, 30);
insert into QUIZ values('ADC003', 5, 30);
insert into QUIZ values('ADC004', 5, 30);
insert into QUIZ values('NLP001', 10, 30);
insert into QUIZ values('NLP002', 10, 30);

insert into QUIZ_IS_OF values('DBS001', 'ICT3171');
insert into QUIZ_IS_OF values('DBS002', 'ICT3171');
insert into QUIZ_IS_OF values('DBS003', 'ICT3171');
insert into QUIZ_IS_OF values('CYS001', 'ICT3156');
insert into QUIZ_IS_OF values('CYS002', 'ICT3156');
insert into QUIZ_IS_OF values('CYS003', 'ICT3156');
insert into QUIZ_IS_OF values('CYS004', 'ICT3156');
insert into QUIZ_IS_OF values('DSA001', 'ICT2171');
insert into QUIZ_IS_OF values('DSA002', 'ICT2171');
insert into QUIZ_IS_OF values('ADC001', 'ECE3171');
insert into QUIZ_IS_OF values('ADC002', 'ECE3171');
insert into QUIZ_IS_OF values('ADC003', 'ECE3171');
insert into QUIZ_IS_OF values('ADC004', 'ECE3171');
insert into QUIZ_IS_OF values('NLP001', 'DSE3156');
insert into QUIZ_IS_OF values('NLP002', 'DSE3156');

insert into TAKES values('200911076', 'DBS001', '27-Oct-2022');
insert into TAKES values('200911076', 'DBS002', '27-Oct-2022');
insert into TAKES values('200911076', 'CYS001', '27-Oct-2022');
insert into TAKES values('200911076', 'CYS002', '27-Oct-2022');
insert into TAKES values('200911076', 'CYS003', '27-Oct-2022');
insert into TAKES values('200911076', 'CYS004', '27-Oct-2022');
insert into TAKES values('200911072', 'DBS001', '27-Oct-2022');
insert into TAKES values('200911072', 'DBS002', '27-Oct-2022');
insert into TAKES values('200911072', 'CYS001', '27-Oct-2022');
insert into TAKES values('200911072', 'CYS002', '27-Oct-2022');
insert into TAKES values('200911072', 'CYS003', '27-Oct-2022');
insert into TAKES values('200911072', 'CYS004', '27-Oct-2022');
insert into TAKES values('200911026', 'DBS001', '27-Oct-2022');
insert into TAKES values('200911026', 'DBS002', '27-Oct-2022');
insert into TAKES values('200911026', 'CYS001', '27-Oct-2022');
insert into TAKES values('200911026', 'CYS002', '27-Oct-2022');
insert into TAKES values('200911026', 'CYS003', '27-Oct-2022');
insert into TAKES values('200911026', 'CYS004', '27-Oct-2022');
insert into TAKES values('200968009', 'NLP001', '27-Oct-2022');
insert into TAKES values('200968009', 'NLP002', '27-Oct-2022');
insert into TAKES values('200907096', 'ADC001', '27-Oct-2022');
insert into TAKES values('200907096', 'ADC002', '27-Oct-2022');
insert into TAKES values('200907096', 'ADC003', '27-Oct-2022');
insert into TAKES values('200907096', 'ADC004', '27-Oct-2022');

insert into QUESTION values('DBS0011', 'DBS Q 1', 'A', 'B', 'C', 'D', 'A');
insert into QUESTION values('DBS0012', 'DBS Q 2', 'A', 'B', 'C', 'D', 'B');
insert into QUESTION values('DBS0013', 'DBS Q 3', 'A', 'B', 'C', 'D', 'C');
insert into QUESTION values('DBS0014', 'DBS Q 4', 'A', 'B', 'C', 'D', 'D');
insert into QUESTION values('DBS0015', 'DBS Q 5', 'A', 'B', 'C', 'D', 'B');
insert into QUESTION values('DBS0016', 'DBS Q 6', 'A', 'B', 'C', 'D', 'C');
insert into QUESTION values('DBS0017', 'DBS Q 7', 'A', 'B', 'C', 'D', 'A');
insert into QUESTION values('DBS0018', 'DBS Q 8', 'A', 'B', 'C', 'D', 'D');
insert into QUESTION values('DBS0019', 'DBS Q 9', 'A', 'B', 'C', 'D', 'C');
insert into QUESTION values('DBS0021', 'DBS Q 10', 'A', 'B', 'C', 'D', 'B');
insert into QUESTION values('DBS0022', 'DBS Q 11', 'A', 'B', 'C', 'D', 'A');

insert into QUESTION_IS_OF values('DBS0011', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0012', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0013', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0014', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0015', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0016', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0017', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0018', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0019', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0021', 'ICT3171');
insert into QUESTION_IS_OF values('DBS0022', 'ICT3171');



=====================================================================================================


--PLSQL QURIES


1.⁠ ⁠*Function to Calculate Total Quiz Marks*
   ⁠ plsql
set serveroutput on;
   CREATE OR REPLACE FUNCTION getTotalMarks(quiz_id IN VARCHAR2) RETURN NUMBER AS
     v_total_marks NUMBER;
   BEGIN
     SELECT SUM(max_marks) INTO v_total_marks FROM QUIZ WHERE id = quiz_id;
     RETURN v_total_marks;
   END;
   /
--added=====================
DECLARE
  v_total_marks NUMBER;
BEGIN
  
  v_total_marks := getTotalMarks('&quiz_id');

  -- Output the result
  DBMS_OUTPUT.PUT_LINE('Total Marks for Quiz ID quiz_id: ' || v_total_marks);
END;
/
==============================================================================
    ⁠
2.⁠ ⁠*Procedure to Add a New Quiz*
   ⁠ plsql
   CREATE OR REPLACE PROCEDURE addQuiz(
     p_id IN VARCHAR2,
     p_max_marks IN NUMBER,
     p_duration IN NUMBER
   ) IS
   BEGIN
     INSERT INTO QUIZ(id, max_marks, duration)
     VALUES (p_id, p_max_marks, p_duration);
     COMMIT;
   END;
   /
===================
(OR)
set serveroutput on;
CREATE OR REPLACE PROCEDURE addQuiz(
  p_id IN VARCHAR2,
  p_max_marks IN NUMBER,
  p_duration IN NUMBER
) IS
BEGIN
  -- Insert the values into the QUIZ table
  INSERT INTO QUIZ(id, max_marks, duration)
  VALUES (p_id, p_max_marks, p_duration);

  -- Commit the transaction
  COMMIT;
END;
/

DECLARE
  v_id QUIZ.id%TYPE;
  v_max_marks QUIZ.max_marks%TYPE;
  v_duration QUIZ.duration%TYPE;
BEGIN
  -- Prompt the user for input
  v_id := '&p_id';
  v_max_marks := &p_max_marks;
  v_duration := &p_duration;

  -- Call the addQuiz procedure
  addQuiz(v_id, v_max_marks, v_duration);
END;
/


=======================================================================================
 3.⁠ ⁠*Cursor to List Questions in a Quiz*
   ⁠ plsql
   CREATE OR REPLACE PROCEDURE listQuestions(quiz_id IN VARCHAR2) IS
     CURSOR c_questions IS
       SELECT prompt FROM QUESTION
       WHERE id IN (SELECT id FROM QUIZ_IS_OF WHERE sub_code = quiz_id);
     v_question VARCHAR2(80);
   BEGIN
     OPEN c_questions;
     LOOP
       FETCH c_questions INTO v_question;
       EXIT WHEN c_questions%NOTFOUND;
       DBMS_OUTPUT.PUT_LINE('Question: ' || v_question);
     END LOOP;
     CLOSE c_questions;
   END;
   (or)==================
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE listQuestions IS
  v_quiz_id QUESTION_IS_OF.id%TYPE;
  CURSOR c_questions IS
    SELECT prompt FROM QUESTION
    WHERE id IN (SELECT id FROM QUIZ_IS_OF WHERE sub_code = v_quiz_id);
  v_question QUESTION.prompt%TYPE;
BEGIN
  -- Prompt the user for input
  v_quiz_id := '&quiz_id';

  -- Open the cursor and fetch questions
  OPEN c_questions;
  LOOP
    FETCH c_questions INTO v_question;
    EXIT WHEN c_questions%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Question: ' || v_question);
  END LOOP;
  CLOSE c_questions;
END;
/

DECLARE
  -- Declare variables to store user input
  v_quiz_id QUESTION_IS_OF.id%TYPE;
BEGIN
  -- Prompt the user for input
  v_quiz_id := '&quiz_id';

  -- Call the listQuestions procedure with user input
  listQuestions(v_quiz_id);
END;
/

==============================================================================================
 4.⁠ ⁠*Procedure to Update Student Password with User Input*
   ⁠ plsql
   CREATE OR REPLACE PROCEDURE updateStudentPassword(p_reg_no IN VARCHAR2) IS
     v_new_password VARCHAR2(50);
   BEGIN
     -- Assuming user input is gathered through some external mechanism, like an application
     DBMS_OUTPUT.PUT_LINE('Enter new password:');
     EXECUTE IMMEDIATE 'ACCEPT v_new_password CHAR(50)';
     UPDATE STUDENT SET pwd = v_new_password WHERE reg_no = p_reg_no;
     COMMIT;
   END;
   /
=================(OR)
set serveroutput on;
CREATE OR REPLACE PROCEDURE updateStudentPassword IS
  v_reg_no STUDENT.reg_no%TYPE;
  v_new_password VARCHAR2(50);
BEGIN
  -- Prompt the user for input
  v_reg_no := '&p_reg_no';

  -- Assuming user input is gathered through some external mechanism, like an application
  DBMS_OUTPUT.PUT_LINE('Enter new password:');
  EXECUTE IMMEDIATE 'ACCEPT v_new_password CHAR(50)';

  -- Update the student password
  UPDATE STUDENT SET pwd = v_new_password WHERE reg_no = v_reg_no;
  COMMIT;
END;
/
=================================================================================================== 
  
5.⁠ ⁠*Cursor with User Input to Filter and List Quizzes by Maximum Marks*
   ⁠ plsql
   CREATE OR REPLACE PROCEDURE filterQuizzesByMarks(p_max_marks IN NUMBER) IS
     CURSOR c_quizzes IS
       SELECT id FROM QUIZ WHERE max_marks <= p_max_marks;
     v_quiz_id VARCHAR2(20);
   BEGIN
     OPEN c_quizzes;
     LOOP
       FETCH c_quizzes INTO v_quiz_id;
       EXIT WHEN c_quizzes%NOTFOUND;
       DBMS_OUTPUT.PUT_LINE('Quiz ID: ' || v_quiz_id);
     END LOOP;
     CLOSE c_quizzes;
   END;
   /
(OR)================================
CREATE OR REPLACE PROCEDURE filterQuizzesByMarks IS
  v_max_marks NUMBER;
  CURSOR c_quizzes IS
    SELECT id FROM QUIZ WHERE max_marks <= v_max_marks;
  v_quiz_id QUIZ.id%TYPE;
BEGIN
  -- Prompt the user for input
  v_max_marks := &p_max_marks;

  -- Open the cursor and fetch quizzes
  OPEN c_quizzes;
  LOOP
    FETCH c_quizzes INTO v_quiz_id;
    EXIT WHEN c_quizzes%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Quiz ID: ' || v_quiz_id);
  END LOOP;
  CLOSE c_quizzes;
END;
/




==========================================================================================
7.*package*
CREATE OR REPLACE PACKAGE student_pkg AS
  -- Procedure to update student password
  PROCEDURE updateStudentPassword(p_reg_no IN VARCHAR2);

  -- Procedure to filter quizzes by maximum marks
  PROCEDURE filterQuizzesByMarks;

  -- Procedure to list questions in a quiz
  PROCEDURE listQuestions;

  -- Function to get total marks for a quiz
  FUNCTION getTotalMarks(quiz_id IN VARCHAR2) RETURN NUMBER;

END student_pkg;
/

CREATE OR REPLACE PACKAGE BODY student_pkg AS
  -- Procedure to update student password
  PROCEDURE updateStudentPassword(p_reg_no IN VARCHAR2) IS
    v_new_password VARCHAR2(50);
  BEGIN
    -- Assuming user input is gathered through some external mechanism, like an application
    DBMS_OUTPUT.PUT_LINE('Enter new password:');
    EXECUTE IMMEDIATE 'ACCEPT v_new_password CHAR(50)';
    UPDATE STUDENT SET pwd = v_new_password WHERE reg_no = p_reg_no;
    COMMIT;
  END;

  -- Procedure to filter quizzes by maximum marks
  PROCEDURE filterQuizzesByMarks IS
    v_max_marks NUMBER;
    CURSOR c_quizzes IS
      SELECT id FROM QUIZ WHERE max_marks <= v_max_marks;
    v_quiz_id QUIZ.id%TYPE;
  BEGIN
    -- Prompt the user for input
    v_max_marks := &p_max_marks;

    -- Open the cursor and fetch quizzes
    OPEN c_quizzes;
    LOOP
      FETCH c_quizzes INTO v_quiz_id;
      EXIT WHEN c_quizzes%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Quiz ID: ' || v_quiz_id);
    END LOOP;
    CLOSE c_quizzes;
  END;

  -- Procedure to list questions in a quiz
  PROCEDURE listQuestions IS
    v_quiz_id QUESTION_IS_OF.id%TYPE;
    CURSOR c_questions IS
      SELECT prompt FROM QUESTION
      WHERE id IN (SELECT id FROM QUIZ_IS_OF WHERE sub_code = v_quiz_id);
    v_question QUESTION.prompt%TYPE;
  BEGIN
    -- Prompt the user for input
    v_quiz_id := '&quiz_id';

    -- Open the cursor and fetch questions
    OPEN c_questions;
    LOOP
      FETCH c_questions INTO v_question;
      EXIT WHEN c_questions%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Question: ' || v_question);
    END LOOP;
    CLOSE c_questions;
  END;

  -- Function to get total marks for a quiz
  FUNCTION getTotalMarks(quiz_id IN VARCHAR2) RETURN NUMBER IS
    v_total_marks NUMBER;
  BEGIN
    SELECT SUM(max_marks) INTO v_total_marks FROM QUIZ WHERE id = quiz_id;
    RETURN v_total_marks;
  END;

END student_pkg;
/

-- Call the updateStudentPassword procedure
BEGIN
  student_pkg.updateStudentPassword('200911076');
  DBMS_OUTPUT.PUT_LINE('Student password updated successfully.');
END;

-- Call the filterQuizzesByMarks procedure
BEGIN
  DBMS_OUTPUT.PUT_LINE('Enter the maximum marks for filtering quizzes:');
  student_pkg.filterQuizzesByMarks;
END;

-- Call the listQuestions procedure
BEGIN
  DBMS_OUTPUT.PUT_LINE('Enter the quiz ID to list questions:');
  student_pkg.listQuestions;
END;

-- Call the getTotalMarks function
DECLARE
  v_quiz_id VARCHAR2(20) := '&quiz_id';
  v_total_marks NUMBER;
BEGIN
  v_total_marks := student_pkg.getTotalMarks(v_quiz_id);
  DBMS_OUTPUT.PUT_LINE('Total marks for quiz ' || v_quiz_id || ': ' || v_total_marks);
END;
==========================================================================

8.*trigger*

